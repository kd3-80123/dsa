package com.sunbeam;

class Deque {
	class Node {
	    int data;
	    Node left;
	    Node right;

	    public Node(int data) {
	        this.data = data;
	        this.left = null;
	        this.right = null;
	    }
	}
    Node head;
    Node tail;

    public Deque() {
        head = null;
        tail = null;
    }

    public void addFirst(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        if (tail == null) {
            head = tail = newNode;
        } else {
            newNode.prev = tail;
            tail.next = newNode;
            tail = newNode;
        }
    }

    public int removeFirst() {
        if (head == null) {
            System.out.println("Deque is empty.");
            return -1;
        }
        int data = head.data;
        if (head == tail) {
            head = tail = null;
        } else {
            head = head.next;
            head.prev = null;
        }
        return data;
    }

    public int removeLast() {
        if (tail == null) {
            System.out.println("Deque is empty.");
            return -1;
        }
        int data = tail.data;
        if (head == tail) {
            head = tail = null;
        } else {
            tail = tail.prev;
            tail.next = null;
        }
        return data;
    }

    public boolean isEmpty() {
        return head == null;
    }

    public void printDeque() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}
